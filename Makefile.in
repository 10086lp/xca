#
#  @configure_input@
#
# $Id$
#

VERSION=@PACKAGE_VERSION@
TAG=$(shell echo "V.$(TVERSION)" |sed "s/\./_/g" )
TARGET=xca-$(TVERSION)

GCC=@CXX@
CC=@CC@

CPPFLAGS=@CPPFLAGS@ @DEFS@ 
CFLAGS=-Wall @ac_DEBUG@

LDFLAGS=-Llib @LDFLAGS@
LIBS=@LIBS@ -lxcadb -lpki

MOC=@MOC@
UIC=@UIC@


###################################

UINAMES=CertDetail ExportKey_UI ExportCert_UI KeyDetail MainWindow_UI \
	NewKey NewX509_UI PassRead PassWrite ReqDetail TrustState \
	CertExtend ExportTinyCA_UI CrlDetail

MOCNAMES=ExportTinyCA NewX509 ExportKey MainWindow ExportCert $(UINAMES)
     
MOBJS=MainWindowKeys.o MainWindowX509Req.o MainWindowX509.o \
      MainWindowTemps.o MainWindowCrl.o 
OOBJS=$(patsubst %,moc_%.o,$(MOCNAMES)) $(patsubst %,%.o,$(MOCNAMES))

OBJS=$(MOBJS) $(OOBJS) main.o

MOC_CPP=$(patsubst %,moc_%.cpp,$(MOCNAMES))
UI_CPP=$(patsubst %, %.cpp, $(UINAMES))
UI_H=$(patsubst %, %.h, $(UINAMES))

all: $(UI_H) libs $(OBJS) xca

re: clean all

$(OBJS): $(UI_H)

%.o: %.cpp
	$(CC) $(CPPFLAGS) $(CFLAGS) -c $< -o $@

xca: $(OBJS) lib/libxcadb.a lib/libpki.a
	$(CC) $(LDFLAGS) $(OBJS) $(LIBS) -o xca
	@echo -e "\n\n\nOk, compilation was successfull. \nNow do as root: 'make install'\n"

libs:
	$(MAKE) -C lib all

clean:
	$(MAKE) -C lib clean
	rm -f $(MOC_CPP) $(UI_CPP) $(UI_H) *~ *.o xca 

distclean: clean	
	$(MAKE) -C lib distclean
	rm -f Makefile config.cache config.h config.log config.status results
	rm -rf autom4te.cache

dist: 
	test ! -z "$(TVERSION)"
	rm -rf $(TARGET)
	cvs export -r $(TAG) -d $(TARGET) xca
	(cd $(TARGET);  autoconf; \
	./mkxcapro.sh; lrelease xca.pro; \
	cat rpm/xca.spec |sed s/VERSION/$(TVERSION)/g >rpm/$(TARGET)-1.spec; \
	cat lib/base.h.win |sed s/VERSION/$(TVERSION)/g >lib/base.h; \
	rm -rf rpm/xca.spec autom4te.cache; \
	cd doc; linuxdoc -B html xca.sgml; )
	tar zcf $(TARGET).tar.gz $(TARGET) 
	#rm -rf ../$(TARGET)
	
install: xca
	strip xca
	install -m 755 -o root -d $(prefix)@prefix@/share/xca $(prefix)@prefix@/bin
	install -m 755 -o root xca $(prefix)@prefix@/bin
	install -m 644 -o root img/*.png $(prefix)@prefix@/share/xca
	install -m 644 -o root xca_??.qm $(prefix)@prefix@/share/xca
	

moc_%.cpp: %.h %.cpp
	$(MOC) $< -o $@

%.h: %.ui
	$(UIC) -o $@ $<
	 
%.cpp: %.h %.ui
	$(UIC) -o $@ -impl $^

.SECONDARY:  $(UI_CPP) $(UI_H) $(MOC_CPP)
